# -*- coding: utf-8 -*-
"""–ê–ª–µ–∫—Å–µ–π_–§–µ–¥—è–Ω–∏–Ω_v1 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AlLPni2sYCJjBWG46SdzjEIiewEvX-Ww

<img src="http://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-12/256/waving-hand.png" align=left width=44, heigth=44>
<div class="alert alert-info">
<b> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b>


–ü—Ä–∏–≤–µ—Ç, –ê–ª–µ–∫—Å–µ–π! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π –ú–∞—Ö–æ—Ä—Ç–æ–≤, –∏ —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç. –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—â–µ–Ω–∏–µ –Ω–∞ ¬´—Ç—ã¬ª üôÇ, –Ω–æ –µ—Å–ª–∏ —Ç–µ–±–µ —ç—Ç–æ –Ω–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, —Ç–æ –¥–∞–π –∑–Ω–∞—Ç—å, –∏ –º—ã –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ ¬´–≤—ã¬ª.


–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –Ω–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–±–æ—é –æ—à–∏–±–∫–∏, –∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –≤—ã—Ä–∞—Å—Ç–∏ –≤ –∫—Ä–µ–ø–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏. –≠—Ç–æ –æ—Ç–¥–∞–ª–µ–Ω–Ω–∞—è —Ü–µ–ª—å. –ê –±–ª–∏–∂–∞–π—à–∞—è - —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –µ—â–µ –ª—É—á—à–µ )).
   

        
–†–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:    
–ë—ã–≤–∞—é—Ç –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –Ω–∏–º –≤—ã–¥–µ–ª–µ–Ω—ã <span style='background-color:#F7B3A4'> –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º </span> –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üõë. –ü–æ—Å–ª–µ –∏—Ö –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.  üôÇ

<span style='background-color:#B7EBA7'> –ó–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º </span> –∏ –∑–Ω–∞—á–∫–æ–º ‚úÖ –æ—Ç–º–µ—á–µ–Ω—ã —É–¥–∞—á–Ω—ã–µ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –≤ –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ò–ª–∏ —Å–æ–≤–µ—Ç—ã ¬´—Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π¬ª, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ –±—É–¥—É—â–µ–º.

<span style='background-color:#F9EDA6'>–ñ—ë–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º </span> –∏ –∑–Ω–∞—á–∫–æ–º ‚ö†Ô∏è –≤—ã–¥–µ–ª–µ–Ω–æ —Ç–æ, —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É. –¢—ã –º–æ–∂–µ—à—å —É—á–µ—Å—Ç—å —ç—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É–¥—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å–µ–π—á–∞—Å (–æ–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).

–î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –≤ –¥–∏–∞–ª–æ–≥–µ: **–µ—Å–ª–∏ —Ç—ã —á—Ç–æ-—Ç–æ –º–µ–Ω—è–µ—à—å –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –º–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º ‚Äî –ø–∏—à–∏ –æ–± —ç—Ç–æ–º**. –í—ã–±–µ—Ä–∏ –¥–ª—è —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–∞–∫–æ–π-—Ç–æ –∑–∞–º–µ—Ç–Ω—ã–π —Ü–≤–µ—Ç, —Ç–∞–∫ –º–Ω–µ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–π, –Ω–µ –∏–∑–º–µ–Ω—è–π –∏ –Ω–µ —É–¥–∞–ª—è–π –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏**. –í—Å—ë —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–µ–µ.
</div>

<div class="alert" style="background-color:#ead7f7;color:#8737bf">
    <font size="3"><b>–æ–±—Ä–∞–∑–µ—Ü –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞</b></font>
   
–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π üôÇ

</div>

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Stop_sign.png/240px-Stop_sign.png" align=left width=35, heigth=35>
<div class="alert alert-danger">
    
–°–∫–∞–∂—É —á–µ—Å—Ç–Ω–æ, —Å–≤–æ–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º —Ç—ã –º–µ–Ω—è —Å–∏–ª—å–Ω–æ –æ–∑–∞–¥–∞—á–∏–ª.
    
–î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ, –µ—Å–ª–∏ –±—ã –º—ã —Ä–µ—à–∞–ª–∏ –ø–æ–¥–æ–±–Ω—É—é –∑–∞–¥–∞—á—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ (–∏–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è), —Ç–æ –Ω–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∏ –¥–µ–ª–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –Ω–∏ –æ–±—É—á–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–æ–¥–µ–ª–∏ –±—ã–ª–æ –±—ã –Ω–µ –Ω—É–∂–Ω–æ.   –í–∑—è–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ OpenAI), –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è –≤ –æ–ø–µ–Ω—Å–æ—Ä—Å–µ, –∑–∞–ø–∏–ª–∏–ª–∏ –±—ã —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –µ–≥–æ –ø–æ–º–æ—â—å—é –∏ –≤—Å—ë. –ë—ã—Å—Ç—Ä–æ, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –Ω–µ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ —Ç–æ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–æ–µ.
    
–û–¥–Ω–∞–∫–æ —Å–µ–π—á–∞—Å —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å —É—á–µ–±–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.  –ò –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–Ω—É opensource –º–æ–¥–µ–ª—å –¥–ª—è —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –¢–µ–º –±–æ–ª–µ–µ, —á—Ç–æ –º–Ω–æ–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–¥–∞–≤–∞—è —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–µ–ª–∞—é—Ç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é CLIP –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ—à–µ–Ω–∏—é (–∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 10-20 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞).
    
–ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–æ—à—É —è–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–æ—Å—è—Ç –∞–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.
    
 - –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
 - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
 - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤, –ø–æ–ª—É—á–∏—Ç—å –µ–¥–∏–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø—Ä–∏–∑–Ω–∞–∫–∏/—Ç–∞—Ä–≥–µ—Ç.
 - –ü—Ä–æ–≤–µ—Å—Ç–∏ —á–∏—Å—Ç–∫—É –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —ç—Ç–∞–ø–µ –æ—Ç –¥–µ—Ç—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 - –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è
 - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π
 - –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫–∏ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—É—á–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∞—è –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å)
 - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    
---------------
    
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤—Ç–∞—å –ø–æ–¥—Ö–æ–¥ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ CLIP (—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –≥–æ–ª–æ–≤–∞–º–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π) –∏ –∏–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ—Å—Å–∞ –¥–ª—è —Å–±–ª–∏–∂–µ–Ω–∏–π –ø–æ—Ö–æ–∂–∏—Ö –∏ —Ä–∞–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ–ø–æ—Ö–æ–∂–∏—Ö.  –ù–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –¥–µ–∫–æ–¥–µ—Ä—ã –æ—Ç CLIP –Ω–µ —Å—Ç–æ–∏—Ç, —Ç.–∫. –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –±—É–¥–µ—Ç "–Ω–µ—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ".
    
    
        


</div>
"""



"""<div class="alert" style="background-color:#ead7f7;color:#8737bf">
    <font size="3"><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞</b></font>
   
–ü—Ä–∏–≤–µ—Ç, –ø–µ—Ä–µ–¥–µ–ª–∞–ª –≤—Å–µ, —á—Ç–æ —Ç—É—Ç —Å–∫–∞–∂–µ—à—å.

</div>

# –°–±–æ—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç-4
–í–∞–º –ø–æ—Ä—É—á–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É.

–î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∏—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –≤—ã–¥–∞—Å—Ç —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1 ‚Äî –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–¥—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É.
"""

# üìä –û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pandas as pd
import numpy as np
import os
import random
from collections import Counter
import matplotlib.pyplot as plt
from tqdm import tqdm

# üß† –ú–æ–¥–µ–ª—å LightGBM
import lightgbm as lgb

# üîç –ú–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
from sklearn.metrics import roc_auc_score, roc_curve
from sklearn.model_selection import GroupShuffleSplit

# üß† –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
from sentence_transformers import SentenceTransformer

# üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from PIL import Image
import torch
from torchvision import models, transforms

# üíª –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
from IPython.display import Image as IPyImage, display

"""# –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
expert_df = pd.read_csv("data/ExpertAnnotations.tsv", sep="\t", names=[
    'img_id', 'description_id', 'exp1', 'exp2', 'exp3'
])

crowd_df = pd.read_csv("data/CrowdAnnotations.tsv", sep="\t", names=[
    'img_id', 'description_id', 'crowd_fraction', 'crowd_yes', 'crowd_no'
])

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
print("–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:")
display(expert_df.head())

print("–ö—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥ –æ—Ü–µ–Ω–∫–∏:")
display(crowd_df.head())

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (majority vote)
def majority_vote(row):
    votes = [row['exp1'], row['exp2'], row['exp3']]
    count = Counter(votes)
    if len(count) == 3:
        return None  # –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª —Ä–∞–∑–Ω—É—é –æ—Ü–µ–Ω–∫—É
    return count.most_common(1)[0][0]  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é

expert_df['expert_label'] = expert_df.apply(majority_vote, axis=1)
expert_df = expert_df.dropna(subset=['expert_label'])  # —É–¥–∞–ª–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ü–µ–Ω–∫—É –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
expert_df['expert_score'] = (expert_df['expert_label'] - 1) / 3  # 1‚Äì4 ‚Üí 0‚Äì1

print("–ü–æ—Å–ª–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
display(expert_df.head())

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ crowd_score –≤—ã—á–∏—Å–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–¥–æ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)
crowd_df['crowd_score'] = crowd_df['crowd_yes'] / (crowd_df['crowd_yes'] + crowd_df['crowd_no'])

# –û–±—ä–µ–¥–∏–Ω–∏–º –¥–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
merged_df = pd.merge(
    expert_df[['img_id', 'description_id', 'expert_score']],
    crowd_df[['img_id', 'description_id', 'crowd_score']],
    on=['img_id', 'description_id']
)

# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç ‚Äî –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: 60% —ç–∫—Å–ø–µ—Ä—Ç, 40% –∫—Ä–∞—É–¥
merged_df['target'] = 0.6 * merged_df['expert_score'] + 0.4 * merged_df['crowd_score']

print("–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (0‚Äì1):")
display(merged_df.head())

# –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
plt.hist(merged_df['target'], bins=20, color='skyblue', edgecolor='black')
plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
plt.xlabel("–û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (0‚Äì1)")
plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä")
plt.grid(True)
plt.show()

"""–ù–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π target, –æ—Ç—Ä–∞–∂–∞—é—â–µ–π —Å—Ç–µ–ø–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ó–Ω–∞—á–µ–Ω–∏—è target –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1 –∏ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –ø—É—Ç—ë–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –∏ –∫—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ —Å –≤–µ—Å–∞–º–∏ 0.6 –∏ 0.4 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–∞—Ä –∏–º–µ—é—Ç –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (target ‚âà 0.0‚Äì0.2), —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—è–º, –∫–æ–≥–¥–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —è–≤–Ω–æ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é. –í —Ç–æ –∂–µ –≤—Ä–µ–º—è –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –≤—Ç–æ—Ä–æ–π, –º–µ–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –ø–∏–∫ –≤ –æ–±–ª–∞—Å—Ç–∏ target ‚âà 1.0, —á—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –ø–∞—Ä, –≥–¥–µ —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

–¢–∞–∫–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 0.3‚Äì0.6, –æ—Ç—Ä–∞–∂–∞—é—â–µ–µ —Å–ª—É—á–∞–∏ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏ –∫—Ä–∞—É–¥–æ–º.

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
"""

# –ó–∞–≥—Ä—É–∑–∫–∞ train_dataset.csv
train_df = pd.read_csv("data/train_dataset.csv")

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
train_df.rename(columns={
    'image': 'img_id',
    'query_id': 'description_id',
    'query_text': 'description'
}, inplace=True)

print("–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫ –∏–∑ train_df:")
display(train_df.head())

# –°–ø–∏—Å–æ–∫ "–æ–ø–∞—Å–Ω—ã—Ö" —Å–ª–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ—Ç—å–º–∏
BANNED_WORDS = [
    "child", "children", "kid", "baby", "toddler", "minor",
    "boy", "girl", "schoolboy", "schoolgirl", "teen", "teenager", "infant"
]

def contains_banned_word(text):
    return any(word in text.lower() for word in BANNED_WORDS)

# –£–¥–∞–ª–∏–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
train_df['has_banned'] = train_df['description'].apply(contains_banned_word)
print(f"üîç –£–¥–∞–ª—è–µ–º {train_df['has_banned'].sum()} —Å—Ç—Ä–æ–∫ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.")

train_df = train_df[~train_df['has_banned']].drop(columns=['has_banned']).reset_index(drop=True)

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º
train_df = pd.merge(train_df, merged_df[['img_id', 'description_id', 'target']], on=['img_id', 'description_id'])

print("üì¶ –û—á–∏—â–µ–Ω–Ω—ã–π –æ–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä —Å –º–µ—Ç–∫–∞–º–∏:")
display(train_df.head())

"""# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# –ó–∞–≥—Ä—É–∑–∫–∞ ResNet-50
resnet = models.resnet50(pretrained=True)
resnet = torch.nn.Sequential(*list(resnet.children())[:-1])  # —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π fc —Å–ª–æ–π
resnet.eval().to(DEVICE)

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–¥ ResNet-50
img_transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
])

# –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_resnet50_embedding(img_path):
    image = Image.open(img_path).convert("RGB")
    tensor = img_transform(image).unsqueeze(0).to(DEVICE)
    with torch.no_grad():
        features = resnet(tensor).squeeze().cpu().numpy()  # —Ä–∞–∑–º–µ—Ä 2048
    return features

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –æ–±—É—á–∞—é—â–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
TRAIN_IMG_DIR = "data/train_images"

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
img_vectors = []
for img_id in tqdm(train_df['img_id'], desc="ResNet-50 —Ñ–∏—á–∏"):
    path = os.path.join(TRAIN_IMG_DIR, img_id)
    vector = get_resnet50_embedding(path)
    img_vectors.append(vector)

# –î–æ–±–∞–≤–∏–º –≤–µ–∫—Ç–æ—Ä –∫–∞–∫ –∫–æ–ª–æ–Ω–∫—É (—á–µ—Ä–µ–∑ NumPy –º–∞—Å—Å–∏–≤)
image_matrix = np.stack(img_vectors)

# –ü—Ä–∏–º–µ—Ä
print("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å image_matrix:", image_matrix.shape)  # (N, 2048)

"""# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""

# –ó–∞–≥—Ä—É–∂–∞–µ–º SBERT-–º–æ–¥–µ–ª—å
sbert_model = SentenceTransformer("paraphrase-MiniLM-L6-v2")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
text_matrix = sbert_model.encode(
    train_df['description'].tolist(),
    show_progress_bar=True
)

print("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:", text_matrix.shape)  # (N, 384)

"""# –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –æ–±—É—á–∞—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É"""

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º: [—Ç–µ–∫—Å—Ç | –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]
X = np.concatenate([text_matrix, image_matrix], axis=1)
y = train_df['target'].values

print("–†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π X:", X.shape)  # (N, 2432)

"""# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ img_id
groups = train_df['img_id'].values
gss = GroupShuffleSplit(n_splits=1, train_size=0.7, random_state=42)
train_idx, val_idx = next(gss.split(X, y, groups=groups))

X_train, X_val = X[train_idx], X[val_idx]
y_train, y_val = y[train_idx], y[val_idx]
y_val_bin = (y_val >= 0.5).astype(int)

# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LightGBM —Å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
model = lgb.LGBMClassifier(
    objective='binary',
    n_estimators=200,
    learning_rate=0.05,
    num_leaves=64,
    max_depth=10,
    reg_lambda=1.0,
    random_state=42
)

model.fit(X_train, (y_train >= 0.5).astype(int))
y_pred_proba = model.predict_proba(X_val)[:, 1]

roc_auc = roc_auc_score(y_val_bin, y_pred_proba)
print(f"üéØ ROC AUC —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: {roc_auc:.4f}")

"""–î–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ ROC AUC (Area Under ROC Curve) –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –ø–æ–º–æ—â—å—é GroupShuffleSplit –ø–æ img_id, —á—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ–±—É—á–∞—é—â–µ–π –∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∞–º–∏.

–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–æ:

ROC AUC = 0.6589

–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ 65.9% —Å–ª—É—á–∞–µ–≤ –º–æ–¥–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –∫–∞–∫–∞—è –∏–∑ –¥–≤—É—Ö –ø–∞—Ä "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Äì—Ç–µ–∫—Å—Ç" —è–≤–ª—è–µ—Ç—Å—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π. –¢–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Å—Ä–µ–¥–Ω–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∑–∞–¥–∞—á–µ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

–ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –æ–±–æ–±—â–∞—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ (PoC).

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
"""

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
test_queries_df = pd.read_csv(
    "data/test_queries.csv",
    sep="|",
    engine="python",
    on_bad_lines='skip'
)

# –£–¥–∞–ª–∏–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
test_queries_df = test_queries_df.drop(columns=[col for col in test_queries_df.columns if col.strip() == ''])

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
test_queries_df.rename(columns={
    'query_id': 'description_id',
    'query_text': 'description',
    'image': 'img_id'
}, inplace=True)

print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {test_queries_df.shape[0]}")

# –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
TEST_IMG_DIR = "data/test_images"
test_img_paths = [
    os.path.join(TEST_IMG_DIR, f)
    for f in os.listdir(TEST_IMG_DIR)
    if f.lower().endswith(('.jpg', '.jpeg', '.png'))
]

# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å ResNet-50
test_image_embs = []
for path in tqdm(test_img_paths, desc="ResNet-50 —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
    emb = get_resnet50_embedding(path)
    test_image_embs.append(emb)

test_image_matrix = np.vstack(test_image_embs)

# –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def search_best_image(text_query, model, test_image_matrix, image_paths):
    if is_banned_query(text_query):
        return "‚ö†Ô∏è This image is unavailable in your country in compliance with local laws."

    # –í–µ–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
    text_vec = sbert_model.encode([text_query])  # (1, 384)
    text_vec = np.repeat(text_vec, test_image_matrix.shape[0], axis=0)  # (N, 384)

    # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å –∫–∞–∂–¥—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    X_test = np.concatenate([text_vec, test_image_matrix], axis=1)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    preds = model.predict_proba(X_test)[:, 1]

    # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    top_idx = np.argmax(preds)
    return image_paths[top_idx]

# –í—ã–±–æ—Ä 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
sample_queries = test_queries_df['description'].sample(10, random_state=42).tolist()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–æ–ø–∞—Å–Ω—ã–µ" —Å–ª–æ–≤–∞
def is_banned_query(text):
    return any(word in text.lower() for word in BANNED_WORDS)

# –ü—Ä–æ–≤–µ—Ä–∫–∞
for text in sample_queries:
    print(f"\nüîé –ó–∞–ø—Ä–æ—Å: {text}")
    result = search_best_image(text, model, test_image_matrix, test_img_paths)

    if isinstance(result, str) and result.startswith("‚ö†Ô∏è"):
        print(result)
    else:
        display(IPyImage(filename=result))

"""–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
–ù–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –ø–æ–∫–∞–∑–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ –º–æ–¥–µ–ª–∏ –ø–æ –ø–æ–∏—Å–∫—É –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±—ã–ª–æ –≤—ã—á–∏—Å–ª–µ–Ω–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏, –∏ –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–µ—Ç–µ–π), –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.

üìå –ü—Ä–∏–º–µ—Ä—ã:
üîç ‚ÄúThe dog is running‚Äù ‚Üí –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–≥—É—â–µ–π —Å–æ–±–∞–∫–∏, —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ –ø–æ —Å—Ü–µ–Ω–µ.

‚ö†Ô∏è ‚ÄúA girl in a purple shirt feeding ducks‚Äù ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è: –≤ –∑–∞–ø—Ä–æ—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ª–æ–≤–æ girl, –ø–æ–¥–ø–∞–¥–∞—é—â–µ–µ –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç –Ω–∞ –¥–µ—Ç—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –í–º–µ—Å—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥–∏—Å–∫–ª–µ–π–º–µ—Ä:

This image is unavailable in your country in compliance with local laws.

–í—ã–≤–æ–¥:
–ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è;

–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–µ–∫—Å—Ç–∞;

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ—Å—É—â–µ—Å—Ç–≤–∏–º–æ—Å—Ç—å PoC –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.

# –í—ã–≤–æ–¥—ã

–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã –ø–æ –ø—Ä–æ–µ–∫—Ç—É

–í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (PoC) —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –¥–ª—è —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞ ¬´–°–æ –°–º—ã—Å–ª–æ–º¬ª, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ LightGBM. –ú–æ–¥–µ–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –µ–¥–∏–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫.

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:

‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑–∞–ª–∞ —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –∑–∞–¥–∞—á–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:

ROC AUC –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–æ—Å—Ç–∞–≤–∏–ª 0.6589, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–∞—Ä—ã.

‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –≤—Å–µ –æ–ø–∏—Å–∞–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ—Ç—è—Ö, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É —Ä—è–¥–∞ —Å—Ç—Ä–∞–Ω.

‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—è–º, —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç —Å—Ü–µ–Ω—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Ç–µ–∫—Å—Ç–µ.


üìå –í—ã–≤–æ–¥:

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç, —á—Ç–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ LightGBM –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Å—É—â–µ—Å—Ç–≤–∏–º–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∏ —É–∂–µ –Ω–∞ PoC-—É—Ä–æ–≤–Ω–µ –¥–∞—ë—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –±—É–¥—É—â–µ–≥–æ MVP.
"""